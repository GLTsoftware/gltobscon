#!/usr/bin/python3

from numpy import savetxt
import matplotlib
from pylab import *
matplotlib.use('GTKAgg')
import matplotlib.pyplot as plt
import numpy as np
import telnetlib
import time
import redis
import sys
import socket

HOST = "192.168.1.15"
PORT = 50000
TIMEOUT = 30
M = 30
#tn.set_debuglevel(0)

# Redis server on obscon, using local IP address
# and default port and database number
r = redis.StrictRedis(host='192.168.1.10',port=6379,db=0)


f,(ax1,ax2,ax3,ax4,ax5)= plt.subplots(5,sharex=True)

maxminute=M #for x range of plots
ax1.set_xlim([0,maxminute])
ax2.set_xlim([0,maxminute])
ax3.set_xlim([0,maxminute])
ax4.set_xlim([0,maxminute])
ax5.set_xlim([0,maxminute])

plt.ion()

timearray=[]
temperature=[]
pressure=[]
humidity=[]
windspeed=[]
winddir=[]
t0=0
timestring=""


while True:
    for j in range(M):
        try:
            try:
                print("Trying to connect...")
                tn = telnetlib.Telnet(HOST,PORT,TIMEOUT)
                time.sleep(1)
            except socket.error:
                print("Could not telnet to AWS310... someone else may be connected to it at the moment... trying again in 1 minute.")
                time.sleep(60)
                break
            if (j==0):
                print("Date Time Unixtime Temp(C) Humidity(%) Pressure(mbar) WindSpeed (m/s) WindDir (deg)")
                t0=time.time()
            t1 = time.time()
            timearray.append((t1-t0)/60.)
    
            #TABLE command gets partial weather data
            #but we use it here only to get the date and time
            try:
                tn.write(("TABLE\n").encode('ascii'))
            except ConnectionResetError:
                print("Connection Reset Error from AWS310... will try again in 1 minute")
                time.sleep(60)
                break
            data = tn.read_until(b"\r\n\r\n",timeout=1)
            line=data.decode('ascii')
            variables=line.split(':')
            values=variables[2].split(' ')
            datestamp=values[1]
            timestamp=values[2]
            timestring = datestamp + " " + timestamp + " " + str(t1)
            #CSVREP command fetches a line of csv data
            tn.write(("CSVREP\n").encode('ascii'))
            data = tn.read_until(b"\n")
            line=data.decode('ascii')
            variables=line.split(',')
            for i in range(1,len(variables)-1,2):
                if "TAAVG1M" in variables[i]:
                    temp=float(variables[i+1])
                    temperature.append(temp)
                if "QFEAVG1M" in variables[i]:
                    pres=float(variables[i+1])
                    pressure.append(pres)
                if "RHAVG1M" in variables[i]:
                    humid=float(variables[i+1])
                    humidity.append(humid)
                if "WDAVG2M" in variables[i]:
                    windd=float(variables[i+1])
                    winddir.append(windd)
                if "WSAVG2M" in variables[i]:
                    winds=float(variables[i+1])
                    windspeed.append(winds)
            ax1.plot(timearray,temperature,"o-",color="red")
            ax2.plot(timearray,humidity,"o-",color="blue")
            ax3.plot(timearray,pressure,"o-",color="green")
            ax4.plot(timearray,windspeed,"o-",color="cyan")
            ax5.plot(timearray,winddir,"o-",color="orange")
            print(timestring,temp,humid,pres,winds,windd)
            r.zadd('weatherData',t1,{"datetime":timestring,"temperature":temp,"humidity":humid,"pressure":pres,"windspeed":winds,"winddir":windd})
            tn.close()
            time.sleep(59)
            plt.pause(0.05) 
        except KeyboardInterrupt:
            print("Closing connection to AWS310. Bye.")
            tn.close()
            sys.exit()
    
while True:
    plt.pause(0.05)
